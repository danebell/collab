package com.github.danebell.protests

import com.typesafe.scalalogging.LazyLogging
import org.clulab.odin.{Actions, Mention, State}

import com.github.danebell.protests.mentions._

class ProtestActions extends Actions with LazyLogging {

  /** Converts [[Mention]]s to [[ProtestMention]]s.
    */
  def mkProtestMention(mentions: Seq[Mention], state: State): Seq[Mention] =
    mentions.map(_.toProtestMention)

  /** This action handles the creation of mentions from labels generated by the NER system.
    * Rules that use this action should run in an iteration following and rules recognizing
    * "custom" entities. This action will only create mentions if no other mentions overlap
    * with a NER label sequence.
    */
  def mkNERMentions(mentions: Seq[Mention], state: State): Seq[Mention] = {
    mentions flatMap { m =>
      val candidates = state.mentionsFor(m.sentence, m.tokenInterval)
      // do any candidates overlap the mention?
      val overlap = candidates.exists(_.tokenInterval.overlaps(m.tokenInterval))
      if (overlap) None else Some(m.toProtestMention)
    }
  }
}